// <auto-generated />
using System;
using IT_Platform_ClassLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IT_Platform_ClassLib.Migrations
{
    [DbContext(typeof(ITPlatformDbContext))]
    [Migration("20250303125825_UpdatedEntitiesVer1")]
    partial class UpdatedEntitiesVer1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CertificationExpertiseProfile", b =>
                {
                    b.Property<int>("CertificationsCertificationID")
                        .HasColumnType("int");

                    b.Property<int>("ExpertiseProfilesProfileID")
                        .HasColumnType("int");

                    b.HasKey("CertificationsCertificationID", "ExpertiseProfilesProfileID");

                    b.HasIndex("ExpertiseProfilesProfileID");

                    b.ToTable("CertificationExpertiseProfile");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Certification", b =>
                {
                    b.Property<int>("CertificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationID"));

                    b.Property<string>("CertURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationID");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertificationID = 1,
                            CertURL = "",
                            IssueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "",
                            Name = "AWS Certified Developer"
                        },
                        new
                        {
                            CertificationID = 2,
                            CertURL = "",
                            IssueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "",
                            Name = "Microsoft Azure Fundamentals"
                        },
                        new
                        {
                            CertificationID = 3,
                            CertURL = "",
                            IssueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "",
                            Name = "Google Cloud Professional"
                        });
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientID = 1,
                            Email = "contact@acme.com",
                            Name = "Acme Corp"
                        },
                        new
                        {
                            ClientID = 2,
                            Email = "info@techsolutions.com",
                            Name = "Tech Solutions"
                        },
                        new
                        {
                            ClientID = 3,
                            Email = "support@innovate.com",
                            Name = "Innovate Ltd"
                        });
                });

            modelBuilder.Entity("IT_Platform_ClassLib.ExpertiseProfile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("ExpertiseProfiles");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Freelancer", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Address = "Ho CHi Minh",
                            CIN = "",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hieu@example.com",
                            FirstName = "Hieu",
                            Gender = "Male",
                            LastName = "Pham",
                            MiddleName = "Phuoc Minh",
                            PhoneNumber = "0123456789"
                        },
                        new
                        {
                            UserID = 2,
                            Address = "Dong Nai",
                            CIN = "",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bao@example.com",
                            FirstName = "Bao",
                            Gender = "Male",
                            LastName = "Vo",
                            MiddleName = "Huynh Thai",
                            PhoneNumber = "0123456789"
                        },
                        new
                        {
                            UserID = 3,
                            Address = "Dong Nai",
                            CIN = "",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anh@example.com",
                            FirstName = "Anh",
                            Gender = "Female",
                            LastName = "Vo",
                            MiddleName = "Ngoc Tram",
                            PhoneNumber = "0123456789"
                        },
                        new
                        {
                            UserID = 4,
                            Address = "Tra Vinh",
                            CIN = "",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tan@example.com",
                            FirstName = "Tan",
                            Gender = "Male",
                            LastName = "Son",
                            MiddleName = "",
                            PhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Milestone", b =>
                {
                    b.Property<int>("MilestoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("MilestoneID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackageID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"));

                    b.Property<decimal>("BudgetMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BudgetMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("ClientID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectID = 1,
                            BudgetMax = 15000m,
                            BudgetMin = 5000m,
                            ClientID = 1,
                            Description = "A platform for online shopping.",
                            Status = "Open",
                            Title = "E-commerce Website"
                        },
                        new
                        {
                            ProjectID = 2,
                            BudgetMax = 20000m,
                            BudgetMin = 8000m,
                            ClientID = 2,
                            Description = "A cross-platform mobile app.",
                            Status = "In Progress",
                            Title = "Mobile App Development"
                        },
                        new
                        {
                            ProjectID = 3,
                            BudgetMax = 25000m,
                            BudgetMin = 10000m,
                            ClientID = 3,
                            Description = "An AI-powered chatbot for customer support.",
                            Status = "Completed",
                            Title = "AI Chatbot"
                        });
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillID");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillID = 1,
                            Name = "C#"
                        },
                        new
                        {
                            SkillID = 2,
                            Name = "JavaScript"
                        },
                        new
                        {
                            SkillID = 3,
                            Name = "Python"
                        });
                });

            modelBuilder.Entity("IT_Platform_ClassLib.SkillInProfile", b =>
                {
                    b.Property<int>("SkillInProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillInProfileID"));

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("SkillInProfileID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SkillID");

                    b.ToTable("SkillInProfiles");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.SkillRequirement", b =>
                {
                    b.Property<int>("SkillRequirementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillRequirementID"));

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("SkillID")
                        .HasColumnType("int");

                    b.HasKey("SkillRequirementID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SkillID");

                    b.ToTable("SkillRequirements");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Submission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionID"));

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreelancerID")
                        .HasColumnType("int");

                    b.Property<int>("MilestoneID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("MilestoneID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("ClientID");

                    b.HasIndex("PackageID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CertificationExpertiseProfile", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationsCertificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.ExpertiseProfile", null)
                        .WithMany()
                        .HasForeignKey("ExpertiseProfilesProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Application", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Freelancer", "Freelancer")
                        .WithMany("Applications")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.Project", "Project")
                        .WithMany("Applications")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.ExpertiseProfile", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Freelancer", "Freelancer")
                        .WithMany("ExpertiseProfiles")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Milestone", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Project", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.SkillInProfile", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.ExpertiseProfile", "Profile")
                        .WithMany("SkillsInProfile")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.Skill", "Skill")
                        .WithMany("SkillInProfiles")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.SkillRequirement", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Project", "Project")
                        .WithMany("SkillRequirements")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.Skill", "Skill")
                        .WithMany("SkillRequirements")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Submission", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Freelancer", "Freelancer")
                        .WithMany("Submissions")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.Milestone", "Milestone")
                        .WithMany("Submissions")
                        .HasForeignKey("MilestoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Subscription", b =>
                {
                    b.HasOne("IT_Platform_ClassLib.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IT_Platform_ClassLib.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Client", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.ExpertiseProfile", b =>
                {
                    b.Navigation("SkillsInProfile");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Freelancer", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ExpertiseProfiles");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Milestone", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Project", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Milestones");

                    b.Navigation("SkillRequirements");
                });

            modelBuilder.Entity("IT_Platform_ClassLib.Skill", b =>
                {
                    b.Navigation("SkillInProfiles");

                    b.Navigation("SkillRequirements");
                });
#pragma warning restore 612, 618
        }
    }
}
