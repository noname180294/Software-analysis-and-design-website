// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = "ACC001",
                            Email = "john.doe@example.com",
                            Password = "123456",
                            Role = "Freelancer"
                        },
                        new
                        {
                            AccountID = "ACC002",
                            Email = "jane.smith@example.com",
                            Password = "123456",
                            Role = "Client"
                        },
                        new
                        {
                            AccountID = "ACC003",
                            Email = "mike.brown@example.com",
                            Password = "123456",
                            Role = "Freelancer"
                        },
                        new
                        {
                            AccountID = "ACC004",
                            Email = "sarah.johnson@example.com",
                            Password = "123456",
                            Role = "Client"
                        },
                        new
                        {
                            AccountID = "ACC005",
                            Email = "emily.davis@example.com",
                            Password = "123456",
                            Role = "Freelancer"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Application", b =>
                {
                    b.Property<string>("ApplicationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FreelancerID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("FreelancerID1");

                    b.HasIndex("ProjectID");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationID = "APP001",
                            CV = "https://johndoe.com/cv",
                            FreelancerID = "FREE001",
                            ProjectID = "PROJ001",
                            Status = "Pending"
                        },
                        new
                        {
                            ApplicationID = "APP002",
                            CV = "https://emilydavis.com/cv",
                            FreelancerID = "FREE003",
                            ProjectID = "PROJ002",
                            Status = "Reviewed"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Certification", b =>
                {
                    b.Property<string>("CertID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CertID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            CertID = "CERT001",
                            CertURL = "https://aws.amazon.com/certification/cert/john-doe",
                            IssueDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Amazon Web Services",
                            Name = "AWS Certified Developer",
                            ProfileID = "PROF001"
                        },
                        new
                        {
                            CertID = "CERT002",
                            CertURL = "https://www.tensorflow.org/certificate",
                            IssueDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Google",
                            Name = "TensorFlow Developer Certificate",
                            ProfileID = "PROF002"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.HasIndex("AccountID");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientID = "CLIENT001",
                            AccountID = "ACC002",
                            Field = "Technology",
                            Name = "Tech Innovations Inc",
                            PhoneNumber = "+1-800-TECH-INN",
                            TaxID = "TAX12345",
                            WebsiteURL = "https://techinnovations.com"
                        },
                        new
                        {
                            ClientID = "CLIENT002",
                            AccountID = "ACC004",
                            Field = "Consulting",
                            Name = "Global Solutions LLC",
                            PhoneNumber = "+1-888-GLOBAL",
                            TaxID = "TAX67890",
                            WebsiteURL = "https://globalsolutions.com"
                        });
                });

            modelBuilder.Entity("BusinessObjects.ExpertiseProfile", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PortfolioURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("ExpertiseProfiles");

                    b.HasData(
                        new
                        {
                            ProfileID = "PROF001",
                            Description = "Experienced software developer specializing in web and mobile applications",
                            Field = "Software Development",
                            FreelancerID = "FREE001",
                            PortfolioURL = "https://johndoe.portfolio.com",
                            Title = "MS"
                        },
                        new
                        {
                            ProfileID = "PROF002",
                            Description = "Machine learning expert with focus on predictive analytics",
                            Field = "Data Science",
                            FreelancerID = "FREE003",
                            PortfolioURL = "https://emilydavis.portfolio.com",
                            Title = "PhD"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Freelancer", b =>
                {
                    b.Property<string>("FreelancerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerID");

                    b.HasIndex("AccountID");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            FreelancerID = "FREE001",
                            AccountID = "ACC001",
                            Address = "123 Main St, Anytown, USA",
                            CIN = "AB12345",
                            DOB = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            MiddleName = "Michael",
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            FreelancerID = "FREE002",
                            AccountID = "ACC003",
                            Address = "456 Oak Ave, Another City, USA",
                            CIN = "CD67890",
                            DOB = new DateTime(1988, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mike",
                            Gender = "Male",
                            LastName = "Brown",
                            MiddleName = "James",
                            PhoneNumber = "+9876543210"
                        },
                        new
                        {
                            FreelancerID = "FREE003",
                            AccountID = "ACC005",
                            Address = "789 Pine Rd, Tech City, USA",
                            CIN = "EF13579",
                            DOB = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            MiddleName = "Rose",
                            PhoneNumber = "+1122334455"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Location", b =>
                {
                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocationID");

                    b.HasIndex("ClientID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = "LOC001",
                            Address = "1234 Innovation Drive, Silicon Valley, CA 94000",
                            ClientID = "CLIENT001"
                        },
                        new
                        {
                            LocationID = "LOC002",
                            Address = "5678 Global Street, New York, NY 10001",
                            ClientID = "CLIENT002"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Milestone", b =>
                {
                    b.Property<string>("MilestoneID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Milestones");

                    b.HasData(
                        new
                        {
                            MilestoneID = "MILE001",
                            Budget = 3000.0,
                            ProjectID = "PROJ001",
                            Status = "InProgress"
                        },
                        new
                        {
                            MilestoneID = "MILE002",
                            Budget = 5000.0,
                            ProjectID = "PROJ002",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Package", b =>
                {
                    b.Property<string>("PackageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackageID");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            PackageID = "PACK001",
                            Name = "Basic Freelancer",
                            Period = 3,
                            Price = 50.0,
                            Type = "Freelancer"
                        },
                        new
                        {
                            PackageID = "PACK002",
                            Name = "Pro Freelancer",
                            Period = 6,
                            Price = 80.0,
                            Type = "Freelancer"
                        },
                        new
                        {
                            PackageID = "PACK003",
                            Name = "Enterprise Freelancer",
                            Period = 12,
                            Price = 125.0,
                            Type = "Freelancer"
                        },
                        new
                        {
                            PackageID = "PACK004",
                            Name = "Standard Client",
                            Period = 3,
                            Price = 150.0,
                            Type = "Client"
                        },
                        new
                        {
                            PackageID = "PACK005",
                            Name = "Premium Client",
                            Period = 6,
                            Price = 250.0,
                            Type = "Client"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("BudgetMax")
                        .HasColumnType("float");

                    b.Property<double>("BudgetMin")
                        .HasColumnType("float");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ClientID1");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectID = "PROJ001",
                            BudgetMax = 10000.0,
                            BudgetMin = 5000.0,
                            ClientID = "CLIENT001",
                            Description = "Build a full-featured e-commerce website with payment integration",
                            Status = "Open",
                            Title = "E-commerce Platform Development"
                        },
                        new
                        {
                            ProjectID = "PROJ002",
                            BudgetMax = 15000.0,
                            BudgetMin = 7000.0,
                            ClientID = "CLIENT002",
                            Description = "Develop a ML model to predict customer behavior",
                            Status = "Open",
                            Title = "Machine Learning Model for Predictive Analytics"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Skill", b =>
                {
                    b.Property<string>("SkillID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillID");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillID = "SKILL001",
                            Name = "Python"
                        },
                        new
                        {
                            SkillID = "SKILL002",
                            Name = "C++"
                        },
                        new
                        {
                            SkillID = "SKILL003",
                            Name = "C#"
                        },
                        new
                        {
                            SkillID = "SKILL004",
                            Name = "JavaScript"
                        },
                        new
                        {
                            SkillID = "SKILL005",
                            Name = "R"
                        });
                });

            modelBuilder.Entity("BusinessObjects.SkillInProfile", b =>
                {
                    b.Property<string>("SkillInProfileID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkillID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillInProfileID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SkillID");

                    b.ToTable("SkillInProfiles");

                    b.HasData(
                        new
                        {
                            SkillInProfileID = "SKILLPROF001",
                            ProficiencyLevel = "Expert",
                            ProfileID = "PROF001",
                            SkillID = "SKILL003"
                        },
                        new
                        {
                            SkillInProfileID = "SKILLPROF002",
                            ProficiencyLevel = "Advanced",
                            ProfileID = "PROF002",
                            SkillID = "SKILL005"
                        });
                });

            modelBuilder.Entity("BusinessObjects.SkillRequirement", b =>
                {
                    b.Property<string>("SkillRequirementID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkillID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkillRequirementID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SkillID");

                    b.ToTable("SkillRequirements");

                    b.HasData(
                        new
                        {
                            SkillRequirementID = "SKILLREQ001",
                            ProficiencyLevel = "Advanced",
                            ProjectID = "PROJ001",
                            SkillID = "SKILL003"
                        },
                        new
                        {
                            SkillRequirementID = "SKILLREQ002",
                            ProficiencyLevel = "Expert",
                            ProjectID = "PROJ002",
                            SkillID = "SKILL005"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Submittion", b =>
                {
                    b.Property<string>("SubmittionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MilestoneID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmittionID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("MilestoneID");

                    b.ToTable("Submittions");

                    b.HasData(
                        new
                        {
                            SubmittionID = "SUBMIT001",
                            Content = "Initial project proposal and wireframes",
                            FreelancerID = "FREE001",
                            MilestoneID = "MILE001",
                            Status = "Pending"
                        },
                        new
                        {
                            SubmittionID = "SUBMIT002",
                            Content = "Preliminary data analysis report",
                            FreelancerID = "FREE003",
                            MilestoneID = "MILE002",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Subscription", b =>
                {
                    b.Property<string>("SubscriptionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("ClientID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("PackageID");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            SubscriptionID = "SUB001",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FreelancerID = "FREE001",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SubscriptionID = "SUB002",
                            ClientID = "CLIENT001",
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SubscriptionID = "SUB003",
                            EndDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FreelancerID = "FREE003",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BusinessObjects.Application", b =>
                {
                    b.HasOne("BusinessObjects.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Freelancer", null)
                        .WithMany("ApplicationList")
                        .HasForeignKey("FreelancerID1");

                    b.HasOne("BusinessObjects.Project", "Project")
                        .WithMany("ApplicationList")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObjects.Certification", b =>
                {
                    b.HasOne("BusinessObjects.ExpertiseProfile", "ExpertiseProfile")
                        .WithMany("CertificationList")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpertiseProfile");
                });

            modelBuilder.Entity("BusinessObjects.Client", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.ExpertiseProfile", b =>
                {
                    b.HasOne("BusinessObjects.Freelancer", "Freelancer")
                        .WithMany("ExpertiseProfileList")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("BusinessObjects.Freelancer", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.Location", b =>
                {
                    b.HasOne("BusinessObjects.Client", "Client")
                        .WithMany("LocationList")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BusinessObjects.Milestone", b =>
                {
                    b.HasOne("BusinessObjects.Project", "Project")
                        .WithMany("MilestoneList")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObjects.Project", b =>
                {
                    b.HasOne("BusinessObjects.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Client", null)
                        .WithMany("ProjectList")
                        .HasForeignKey("ClientID1");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BusinessObjects.SkillInProfile", b =>
                {
                    b.HasOne("BusinessObjects.ExpertiseProfile", "ExpertiseProfile")
                        .WithMany("SkillInProfileList")
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Skill", "Skill")
                        .WithMany("SkillInProfileList")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpertiseProfile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("BusinessObjects.SkillRequirement", b =>
                {
                    b.HasOne("BusinessObjects.Project", "Project")
                        .WithMany("SkillRequirementList")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Skill", "Skill")
                        .WithMany("SkillRequirementList")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("BusinessObjects.Submittion", b =>
                {
                    b.HasOne("BusinessObjects.Freelancer", "Freelancer")
                        .WithMany("SubmittionList")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Milestone", "Milestone")
                        .WithMany("SubmittionList")
                        .HasForeignKey("MilestoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("BusinessObjects.Subscription", b =>
                {
                    b.HasOne("BusinessObjects.Client", "Client")
                        .WithMany("SubscriptionList")
                        .HasForeignKey("ClientID");

                    b.HasOne("BusinessObjects.Freelancer", "Freelancer")
                        .WithMany("SubscriptionList")
                        .HasForeignKey("FreelancerID");

                    b.HasOne("BusinessObjects.Package", null)
                        .WithMany("SubscriptionList")
                        .HasForeignKey("PackageID");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("BusinessObjects.Client", b =>
                {
                    b.Navigation("LocationList");

                    b.Navigation("ProjectList");

                    b.Navigation("SubscriptionList");
                });

            modelBuilder.Entity("BusinessObjects.ExpertiseProfile", b =>
                {
                    b.Navigation("CertificationList");

                    b.Navigation("SkillInProfileList");
                });

            modelBuilder.Entity("BusinessObjects.Freelancer", b =>
                {
                    b.Navigation("ApplicationList");

                    b.Navigation("ExpertiseProfileList");

                    b.Navigation("SubmittionList");

                    b.Navigation("SubscriptionList");
                });

            modelBuilder.Entity("BusinessObjects.Milestone", b =>
                {
                    b.Navigation("SubmittionList");
                });

            modelBuilder.Entity("BusinessObjects.Package", b =>
                {
                    b.Navigation("SubscriptionList");
                });

            modelBuilder.Entity("BusinessObjects.Project", b =>
                {
                    b.Navigation("ApplicationList");

                    b.Navigation("MilestoneList");

                    b.Navigation("SkillRequirementList");
                });

            modelBuilder.Entity("BusinessObjects.Skill", b =>
                {
                    b.Navigation("SkillInProfileList");

                    b.Navigation("SkillRequirementList");
                });
#pragma warning restore 612, 618
        }
    }
}
